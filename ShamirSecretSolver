#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
long long int convert_to_decimal(const char *value, int base) {
    long long int result = 0;
    while (*value) {
        result = result * base + (*value >= '0' && *value <= '9' ? *value - '0' : *value - 'a' + 10);
        value++;
    }
    return result;
}

long long int lagrange_interpolation(int *x, long long int *y, int k) {
    long long int result = 0;
    for (int i = 0; i < k; i++) {
        long long int term = y[i];
        for (int j = 0; j < k; j++) {
            if (i != j) {
                term = term * (0 - x[j]) / (x[i] - x[j]);
            }
        }
        result += term;
    }
    return result;
}

long long int process_testcase(int *x_values, char **bases, char **values, int n, int k) {
    long long int y_values[n];
    for (int i = 0; i < n; i++) {
        int base = atoi(bases[i]);
        y_values[i] = convert_to_decimal(values[i], base);
    }
    return lagrange_interpolation(x_values, y_values, k);
}

int main() {
  
    int n1 = 4, k1 = 3;
    int x_values1[] = {1, 2, 3, 6};  // Example keys
    char *bases1[] = {"10", "2", "10", "4"};
    char *values1[] = {"4", "111", "12", "213"};

    int n2 = 10, k2 = 7;
    int x_values2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    char *bases2[] = {"6", "15", "15", "16", "8", "3", "3", "6", "12", "7"};
    char *values2[] = {
        "13444211440455345511", "aed7015a346d63", "6aeeb69631c227c",
        "e1b5e05623d881f", "316034514573652620673", "2122212201122002221120200210011020220200",
        "20120221122211000100210021102001201112121", "20220554335330240002224253",
        "45153788322a1255483", "1101613130313526312514143"
    };

  
    long long int secret1 = process_testcase(x_values1, bases1, values1, n1, k1);
    long long int secret2 = process_testcase(x_values2, bases2, values2, n2, k2);


    printf("Secret for Test Case 1: %lld\n", secret1);
    printf("Secret for Test Case 2: %lld\n", secret2);

    return 0;
}

// output :
Secret for Test Case 1: 3
Secret for Test Case 2: -6148834854972467479
